Here’s a clean, **copy-paste prompt** for Replit Agent 3. It’s generic (no images or personal context) and fully specifies the tool.

---

**Build a Python tool: “Update-Only Email Verifier”**

**Goal**
Create a program that ingests large `.csv` or `.xlsx` files (thousands of rows, multi-sheet), validates/fixes **only the Email column**, and writes an output file with **identical schema** (same sheets, columns, order). No new columns are added. Optionally emit a side-car “changes report”.

---

### Tech & Interfaces

* **Language:** Python 3.11+
* **Packages:** `pandas`, `openpyxl`, `fastapi`, `uvicorn`, `pydantic`, `email-validator`, `idna`, `tld`, `rapidfuzz`, `python-dotenv`.
* **Runs as:**

  1. **CLI**: `python -m app.cli --in INPUT --out OUTPUT [--confidence 0.85] [--deterministic-only]`
  2. **Web UI (FastAPI)**: upload → process → download; progress log shown.

---

### Input / Output

* **Input:** CSV or XLSX (may contain multiple sheets). The email header can vary; treat case-insensitive matches among: `email`, `email address`, `e-mail`, `work email`, `business email`.
* **Output:** Same file type as input, with **only** the Email cells updated. Sheets without an Email column are passed through unchanged.
* **Optional side-car:** `changes_report.csv` with columns: `sheet,row_index,original_email,new_email,reason,confidence`.

---

### Processing Pipeline

1. **Load file**

   * CSV: chunked reading for memory safety.
   * XLSX: iterate sheets; for very large sheets support row streaming where possible.

2. **Detect Email column**

   * Case-insensitive header search using the set above; prefer exact `email` if multiple matches.

3. **Deterministic pre-pass (no LLM)**

   * Normalize: trim; remove zero-width chars; replace smart quotes; strip angle brackets; collapse internal whitespace; replace fullwidth `＠` with `@`; lowercase **domain** only; strip trailing dot.
   * Syntax guardrails: exactly one `@`; non-empty local/domain; no spaces; no leading/trailing dots; collapse `..` in domain; (local `..` → suggest single dot only if unambiguous).
   * Fix maps:

     * **Common TLD typos:** `.con→.com`, `.cmo→.com`, `.cim→.com`, `.c0m→.com`.
     * **Common domain typos:** `gmial.com→gmail.com`, `gamil.com→gmail.com`, `outlok.com→outlook.com`, etc.
   * Flags: `role_account` (`info@, sales@, admin@, support@, noreply@, careers@, billing@, accounts@`), `free_mail_domain` (gmail/outlook/yahoo/icloud/proton/aol), `disposable_domain` (local list), `non_ascii_domain` (convert via `idna`).
   * Produce a local decision: `accept / fix_auto / review / suppress` and a normalized suggestion.

4. **Optional LLM pass** (only if not `--deterministic-only`)

   * Send **email string only** and boolean flags; require **JSON-only output** using this exact schema:

     ```json
     {"input_email":"","normalized_email":"","action":"accept|fix_auto|review|suppress","confidence":0.0,"risk_reasons":[],"suggested_fix":null,"notes":""}
     ```
   * System guidance for the LLM: validate email **plausibility** only; no network calls; perform the same normalization/typo checks; at most one unambiguous correction; set confidence in \[0,1].

5. **Routing & update-only rule**

   * If `action == "accept"` → write `normalized_email` (or original if same).
   * If `action == "fix_auto"` and `confidence ≥ threshold` (default `0.85`) → write `suggested_fix` if present else `normalized_email`.
   * If `action in {"review","suppress"}` → leave original value unchanged.
   * Log any change to the optional side-car report.

6. **Write output**

   * Preserve sheet names, column order, data types where feasible, and row counts.

---

### Privacy & Safety

* Do not send any field other than the **email string** (and booleans) to the LLM.
* Never claim deliverability; DNS/MX/SMTP checks are out of scope.

---

### Performance & Robustness

* Handle ≥50k rows; chunk CSV; rate-limit and retry LLM calls; provide a progress indicator in CLI and Web UI.
* Support `--deterministic-only` so the tool works without any API keys.

---

### Configuration

* `.env`: `OPENAI_API_KEY` or `ANTHROPIC_API_KEY`, plus `LLM_PROVIDER` and `LLM_MODEL`.
* `config.yaml`: confidence threshold, typo maps, role/free/disposable domain lists.

---

### Project Structure (create these files)

```
app/
  __init__.py
  cli.py
  main.py
  core/
    processor.py
    io_utils.py
    detect.py
    normalize.py
    routing.py
    lists.py
  llm/
    adapter.py
    openai_client.py   # JSON-mode call + retries
    anthropic_client.py
web/
  templates/index.html
  static/styles.css
samples/
  sample_input.xlsx
  sample_output_expected.xlsx
tests/
  test_normalize.py
  test_detect.py
  test_routing.py
  test_end_to_end.py
README.md
requirements.txt
```

---

### Minimal APIs to implement

**Routing decision**

```python
def choose_output(original, result, threshold=0.85):
    act = (result or {}).get("action")
    if act == "accept":
        return result.get("normalized_email") or original, True, "accept"
    if act == "fix_auto" and (result.get("confidence", 0.0) >= threshold):
        return (result.get("suggested_fix")
                or result.get("normalized_email")
                or original), True, "fix_auto"
    return original, False, act or "review"
```

**LLM schema constant**

```python
LLM_SCHEMA = {
  "input_email": "", "normalized_email": "", "action": "",
  "confidence": 0.0, "risk_reasons": [], "suggested_fix": None, "notes": ""
}
```

---

### Acceptance tests (must pass)

1. **Schema preserved (XLSX)**: multi-sheet file where only one sheet has an Email column → output matches input schema exactly; only email cells may differ.
2. **Obvious fix applied**: `anna@company.con` → `anna@company.com` with `action=fix_auto`, `confidence ≥ 0.85`.
3. **Valid plus-tag accepted**: `jane+events@gmail.com` unchanged, `action=accept`.
4. **Role account not overwritten**: `sales@acme.com` remains unchanged (`review`).
5. **Unicode/IDN handled**: domain punycode conversion flagged; only updated if correction is unambiguous.
6. **Deterministic-only mode**: full pipeline runs and writes output with no LLM key.
7. **Large CSV**: ≥100k rows processed without out-of-memory; progress visible.

---

**Deliverables:** working CLI and FastAPI app, tests, sample files, and README with setup/run instructions. Use conservative defaults and the update-only policy at all times.
